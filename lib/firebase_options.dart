// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {

  // Define keys for environment variables
  static const String _firebaseApiKey = String.fromEnvironment('FIREBASE_API_KEY', defaultValue: '');
  static const String _firebaseAppId = String.fromEnvironment('FIREBASE_APP_ID', defaultValue: '');
  static const String _firebaseMessagingSenderId = String.fromEnvironment('FIREBASE_MESSAGING_SENDER_ID', defaultValue: '');
  static const String _firebaseProjectId = String.fromEnvironment('FIREBASE_PROJECT_ID', defaultValue: '');
  static const String _firebaseAuthDomain = String.fromEnvironment('FIREBASE_AUTH_DOMAIN', defaultValue: '');
  static const String _firebaseStorageBucket = String.fromEnvironment('FIREBASE_STORAGE_BUCKET', defaultValue: '');
  static const String _firebaseMeasurementId = String.fromEnvironment('FIREBASE_MEASUREMENT_ID', defaultValue: ''); // For Web
  static const String _firebaseIosBundleId = String.fromEnvironment('FIREBASE_IOS_BUNDLE_ID', defaultValue: ''); // For iOS

  // Specific App IDs for different platforms if they differ from _firebaseAppId
  // Often, App ID is platform-specific, while other values might be shared.
  static const String _firebaseAppIdWeb = String.fromEnvironment('FIREBASE_APP_ID_WEB', defaultValue: _firebaseAppId);
  static const String _firebaseAppIdAndroid = String.fromEnvironment('FIREBASE_APP_ID_ANDROID', defaultValue: _firebaseAppId);
  static const String _firebaseAppIdIos = String.fromEnvironment('FIREBASE_APP_ID_IOS', defaultValue: _firebaseAppId);
  static const String _firebaseAppIdLinux = String.fromEnvironment('FIREBASE_APP_ID_LINUX', defaultValue: _firebaseAppId);
  // It's also common to have different API keys per platform, but for simplicity here, one main key is used.
  // If platform-specific API keys are needed, define more String.fromEnvironment variables like:
  // static const String _firebaseApiKeyWeb = String.fromEnvironment('FIREBASE_API_KEY_WEB', defaultValue: _firebaseApiKey);

  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android; // Replaced UnsupportedError
      case TargetPlatform.iOS:
        return ios; // Replaced UnsupportedError
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        return linux; // Return Linux options
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: _firebaseApiKey,
    appId: _firebaseAppIdWeb,
    messagingSenderId: _firebaseMessagingSenderId,
    projectId: _firebaseProjectId,
    authDomain: _firebaseAuthDomain,
    storageBucket: _firebaseStorageBucket,
    measurementId: _firebaseMeasurementId, // Web often uses measurementId
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: _firebaseApiKey, // Assuming same API key, or use _firebaseApiKeyAndroid
    appId: _firebaseAppIdAndroid,
    messagingSenderId: _firebaseMessagingSenderId,
    projectId: _firebaseProjectId,
    authDomain: _firebaseAuthDomain, // Added from web, ensure it's correct for Android too
    storageBucket: _firebaseStorageBucket,
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: _firebaseApiKey, // Assuming same API key, or use _firebaseApiKeyIos
    appId: _firebaseAppIdIos,
    messagingSenderId: _firebaseMessagingSenderId,
    projectId: _firebaseProjectId,
    authDomain: _firebaseAuthDomain, // Added from web
    storageBucket: _firebaseStorageBucket,
    iosBundleId: _firebaseIosBundleId,
  );

  static const FirebaseOptions linux = FirebaseOptions(
    apiKey: _firebaseApiKey, // Assuming same API key, or use _firebaseApiKeyLinux
    appId: _firebaseAppIdLinux,
    messagingSenderId: _firebaseMessagingSenderId,
    projectId: _firebaseProjectId,
    authDomain: _firebaseAuthDomain, // Added from web
    storageBucket: _firebaseStorageBucket,
    // measurementId: _firebaseMeasurementId, // Linux might use measurementId if using Analytics
  );
}
